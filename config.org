# -*- mode: org; coding: utf-8; -*-
# Source:     https://github.com/novoid/dot-emacs
# License:    This file is licensed under the GPL v3.
#+TODO: ACTIVE | DISABLED
#+STARTUP: indent

* General settings
** inhibit the startup screen
#+BEGIN_SRC emacs-lisp
(setq inhibit-startup-screen t)
#+END_SRC

** disable toolbar
#+BEGIN_SRC emacs-lisp
(tool-bar-mode -1)
#+END_SRC

** disable menubar
#+BEGIN_SRC emacs-lisp
(menu-bar-mode -1)
#+END_SRC

** Backup files
#+BEGIN_SRC emacs-lisp
(setq backup-directory-alist
      `((".*" . ,temporary-file-directory)))
(setq auto-save-file-name-transforms
      `((".*" ,temporary-file-directory t)))
#+END_SRC

** Default Indentation
#+BEGIN_SRC emacs-lisp
(setq-default tab-width 4)
(setq-default indent-tabs-mode nil)
(setq python-indent 4)
#+END_SRC
** Package Manager
Configure the package manager of my GNU/Emacs.
#+BEGIN_SRC emacs-lisp
(require 'package)
(let* ((no-ssl (and (memq system-type '(windows-nt ms-dos))
                    (not (gnutls-available-p))))
       (proto (if no-ssl "http" "https")))
  ;; Comment/uncomment these two lines to enable/disable MELPA and MELPA Stable as desired
  (add-to-list 'package-archives (cons "melpa" (concat proto "://melpa.org/packages/")) t)
  ;;(add-to-list 'package-archives (cons "melpa-stable" (concat proto "://stable.melpa.org/packages/")) t)
  (when (< emacs-major-version 24)
    ;; For important compatibility libraries like cl-lib
    (add-to-list 'package-archives '("gnu" . (concat proto "://elpa.gnu.org/packages/")))))
(package-initialize)

(unless (package-installed-p 'use-package)
  (package-refresh-contents)
  (package-install 'use-package))

(eval-when-compile
  (require 'use-package))
#+END_SRC
** yes or no
*** use y/n instead of yes/no
#+BEGIN_SRC emacs-lisp
(defalias 'yes-or-no-p 'y-or-n-p)
#+END_SRC
* DISABLED Server mode

  Start Emacs as a server process: new files can be visited via
  =emacsclient= (instead of parallel =emacs= instances). Therefore, I
  don't have to run multiple instances (which occupies RAM storage) and
  I am able to open new files instantly.
  
  #+BEGIN_SRC emacs-lisp
  (server-start)
  #+END_SRC
* DISABLED Flycheck

«[[http://www.flycheck.org/][Flycheck]] is a modern on-the-fly syntax checking extension for GNU
Emacs, intended as replacement for the older Flymake extension which
is part of GNU Emacs.»

- http://www.flycheck.org/en/latest/guide/quickstart.html
- 2016-11-05: converted to use-package according to http://www.flycheck.org/en/latest/user/installation.html#use-package
#+BEGIN_SRC emacs-lisp
(use-package flycheck
  :ensure t
  :init
  (global-flycheck-mode)
  :config
  (setq flycheck-flake8-maximum-line-length 200); http://www.flycheck.org/manual/latest/Configuring-checkers.html#Configuring-checkers
  )
#+END_SRC
* GnuPlot

«[[http://www.gnuplot.info/][Gnuplot]] is a portable command-line driven graphing utility for Linux,
OS/2, MS Windows, OSX, VMS, and many other platforms.»

Also very handy when [[http://orgmode.org/worg/org-tutorials/org-plot.html][visualizing table data within Org-mode]]! (see
Org-mode/babel configuration)

Example: place the cursor within the table and evaluate
=org-plot/gnuplot= or use the keyboard shortcut =C-c " g=

#+plot: ind:1 deps:(2) type:2d with:"impulse lw 6" set:"yrange [0:]" title "Test-Plot"
| When             | How many |
|------------------+----------|
| [2016-11-17 Thu] |        3 |
| [2016-11-23 Wed] |        4 |
| [2016-12-10 Sat] |        1 |

#+BEGIN_SRC emacs-lisp
;; gnuplot
  (use-package gnuplot
    :ensure t
    :defer 10)
#+END_SRC

* Org-mode
** Basic styling
#+BEGIN_SRC emacs-lisp
(setq org-startup-indented t
      org-hide-emphasis-markers t
      org-src-fontify-natively t)
#+END_SRC
** More Styling

automatically change status of a heading to =DONE= when all children are done:
- http://orgmode.org/org.html#Breaking-down-tasks
- deactivated because WAITING got changed to TODO
#+BEGIN_SRC emacs-lisp
(defun org-summary-todo (n-done n-not-done)
  "Switch entry to DONE when all subentries are done, to TODO otherwise."
  (let (org-log-done org-log-states)   ; turn off logging
    (org-todo (if (= n-not-done 0) "DONE" "TODO"))))
(add-hook 'org-after-todo-statistics-hook 'org-summary-todo)
#+END_SRC

Set the width of inline images:
#+BEGIN_SRC emacs-lisp
(setq org-image-actual-width '(400))
#+END_SRC

Nice looking bullets for headings:
#+BEGIN_SRC emacs-lisp
(use-package org-bullets
    :ensure t
    :config ;; executed after loading package
    (add-hook 'org-mode-hook (lambda () (org-bullets-mode 1)))
)
#+END_SRC
** General key bindings

Standard key bindings:
#+BEGIN_SRC emacs-lisp
  (global-set-key "\C-cl" 'org-store-link)
  (global-set-key "\C-ca" 'org-agenda)
#+END_SRC
** org-mode-hook

Opening image files with external viewer:
- http://stackoverflow.com/questions/3973896/emacs-org-mode-file-viewer-associations
#+BEGIN_SRC emacs-lisp
  (add-hook 'org-mode-hook
	    '(lambda ()
	       (setq org-file-apps
		     (append '(
			       ("\\.png\\'" . default)
			       ("\\.jpg\\'" . default)
			       ("\\.jpeg\\'" . default)
			       ("\\.tiff\\'" . default)
			       ("\\.docx\\'" . default)
			       ("\\.xlsx\\'" . default)
			       ("\\.pptx\\'" . default)
			       ) org-file-apps ))))
#+END_SRC
** DISABLED org-mind-map

I found [[https://github.com/theodorewiles/org-mind-map][org-mind-map]] via an [[http://irreal.org/blog/?p=6561][article on irreal]].

At the moment, I am not planning on using it intensively. It is maybe
a cool method to visualize the structure of some Org-mode files of
mine for demonstration purposes for novice or non-Org-users.

#+BEGIN_SRC emacs-lisp
  (use-package org-mind-map
    ;;:ensure t
    :defer 15
    :load-path "~/.emacs.d/contrib/org-mind-map/"
    :config ;; executed after loading package
  )
#+END_SRC

2017-10-14: Unfortunately, I do have [[https://github.com/theodorewiles/org-mind-map/issues/13][issues with this tool so that I
had to disable it]]. Maybe I'd give it another try in a couple of months
or so.
** Export plugins
*** ox-pandoc
#+BEGIN_SRC emacs-lisp
(use-package ox-pandoc
  :defer 1
  :ensure t)
#+END_SRC
*** ox-twbs; orgMode to twitter bootstrap
#+BEGIN_SRC emacs-lisp
(use-package ox-twbs
  :ensure t
  :init (require 'ox-twbs ))
#+END_SRC
*** Publishing project
#+BEGIN_SRC emacs-lisp
(setq org-publish-project-alist
      '(("org-notes"
         :base-directory "~/Documents/orgMode/"
         :publishing-directory "~/Documents/orgMode/public_html/"
         :publishing-function org-twbs-publish-to-html
         :with-sub-superscript nil
         )))

(defun my-org-publish-buffer ()
  (interactive)
  (save-buffer)
  (save-excursion (org-publish-current-file))
  (let* ((proj (org-publish-get-project-from-filename buffer-file-name))
         (proj-plist (cdr proj))
         (rel (file-relative-name buffer-file-name
                                  (plist-get proj-plist :base-directory)))
         (dest (plist-get proj-plist :publishing-directory)))
    (browse-url (concat "file://"
                        (file-name-as-directory (expand-file-name dest))
                        (file-name-sans-extension rel)
                        ".html"))))
#+END_SRC
*** ox-beamer - Beamer export
#+BEGIN_SRC emacs-lisp
(setq org-export-backends (quote (
       beamer
       latex)))
#+END_SRC
*** DISABLED ox-reveal
#+BEGIN_SRC emacs-lisp
(use-package ox-reveal
:ensure ox-reveal)

(setq org-reveal-root "http://cdn.jsdelivr.net/reveal.js/3.0.0/")
(setq org-reveal-mathjax t)

(use-package htmlize
:ensure t)
#+END_SRC
** Agenda files
#+BEGIN_SRC emacs-lisp
(setq org-agenda-files '("~/Documents/RUBE/trunk/Project Management/Tasks"))
#+END_SRC
** For embedding image as base64
This function will help in embedding image in base64 format
within the html file
#+BEGIN_SRC emacs-lisp
(defun tob64 (filename)
  (base64-encode-string
   (with-temp-buffer
     (insert-file-contents filename)
     (buffer-string))))
#+END_SRC

Now in the org file add image as below; Remove the extra '#'

##+BEGIN_SRC emacs-lisp :results html :exports results
(format "<img src=\"data:image/png;base64,%s\">"
    (tob64 "~/Pictures/test3.jpg"))
##+END_SRC
** org-babel settings
#+BEGIN_SRC emacs-lisp
(setq org-confirm-babel-evaluate nil)
#+END_SRC
** Capture templates
#+BEGIN_SRC emacs-lisp :tangle no
(setq org-capture-templates
      '(("t" "Todo" entry (file+headline "~/Documents/RUBE/trunk/Project Management/Tasks/tasks.org" "Tasks")
              "* TODO %?\n  %i\n ")
      ("j" "Journal" entry (file+olp+datetree "~/org/journal.org")
          "* %?\nEntered on %U\n  %i\n  %a")))
#+END_SRC
#+BEGIN_SRC emacs-lisp
(setq org-capture-templates '((
     "t"                ; key
     "Todo"             ; description
     entry              ; type
     (file+headline "~/Documents/RUBE/trunk/Project Management/Tasks/tasks.org" "Tasks")       ; target
     "* TODO [#B] %^{Todo} \n:PROPERTIES:\n:Created: %U\n:END:\n\n%?"  ; template
     :prepend t        ; properties
     :empty-lines 1    ; properties
     :created t        ; properties
     )))
#+END_SRC
* Packages
** Evil mode
[[https://github.com/timcharper/evil-surround][evil-surround]]: same functionality as surround.vim
*** Evil mode
#+BEGIN_SRC emacs-lisp
  (use-package evil
    :ensure t
    :config
    (evil-mode 1)

    (use-package evil-surround
      :ensure t
      :config
      (global-evil-surround-mode))

    (use-package evil-indent-textobject
      :ensure t)
  )
#+END_SRC

** DISABLED nyan-mode - Nyan Cat instead of scroll bar

«[[https://github.com/TeMPOraL/nyan-mode/][Nyan Mode]] is an analog indicator of your position in the buffer. The
Cat should go from left to right in your mode-line, as you move your
point from 0% to 100%.»

via https://www.reddit.com/r/emacs/comments/3xoins/totally_useless_and_utterly_awesome_packages/

This seems to be a bit silly but it is actually quite useful for me. I
usually do work with a ninety degree tilted monitor where horizontal
space is limited but vertical space not. By disabling the scroll bar
for Emacs (see further above) and using the Nyan cat as a replacement
for it, I can save precious horizontal space.


#+BEGIN_SRC emacs-lisp
(use-package nyan-mode
  :ensure t ;; install package if not found OR: (setq use-package-always-ensure t)
  :config
  (nyan-mode t)
)
#+END_SRC
** anzu-mode - showing number of matches when searching

«[[https://github.com/syohex/emacs-anzu][anzu.el]] is an Emacs port of anzu.vim. anzu.el provides a minor mode
which displays current match and total matches information in the
mode-line in various search modes.»

I love this visualization.

#+BEGIN_SRC emacs-lisp
(use-package anzu
  :ensure t ;; install package if not found OR: (setq use-package-always-ensure t)
  :diminish anzu-mode
  :config
  (global-anzu-mode +1)
)
#+END_SRC
** smart-mode-line - abbreviating paths,

«[[https://github.com/Malabarba/smart-mode-line][Smart Mode Line]] is a sexy mode-line for Emacs. It aims to be easy to
read from small to large monitors by using colors, a prefix feature,
and smart truncation.»

#+BEGIN_SRC emacs-lisp
(use-package smart-mode-line
  :ensure t ;; install package if not found OR: (setq use-package-always-ensure t)
  :config
  (setq sml/no-confirm-load-theme t)
  (setq sml/theme 'respectful) ;; select theme: light, dark, respectful
  ;; hiding minor modes from mode line (don't forget the leading space)
  (setq rm-blacklist '(" Fill" " Ind" " MRev" " hl-p" " Guide" " OrgStruct" " ,"))
  ;; replacing path names with abbrevations:
  (add-to-list 'sml/replacer-regexp-list '("^~/hosts/all/config/emacs.d" ":EMACS:") t)
  (add-to-list 'sml/replacer-regexp-list '("^~/org" ":ORG:") t)
  (add-to-list 'sml/replacer-regexp-list '("^~/frankie/src/lazyblorg" ":LB:") t)
  (add-to-list 'sml/replacer-regexp-list '("^C:/Users/karl.voit/org" ":ORG:") t)
  (add-to-list 'sml/replacer-regexp-list '("^~/frankie/" "~/") t)
  (smart-mode-line-enable)
)
#+END_SRC
** display-time-mode - Enable the display of time in the modeline

http://www.emacswiki.org/emacs/DisplayTime
- via: http://emacs.stackexchange.com/questions/13227/easy-way-to-give-the-time-its-own-face-in-modeline

#+BEGIN_SRC emacs-lisp
(setq display-time-string-forms
      '((propertize (format-time-string "%A %F %R" now) 'face 'bold)))
(display-time-mode t)
#+END_SRC
** swiper - ivy-enhanced alternative to isearch

#+BEGIN_QUOTE
flexible, simple tools for minibuffer completion in Emacs

[[https://github.com/abo-abo/swiper][This repository]] contains:

1. *Ivy*, a generic completion mechanism for Emacs.
2. *Counsel*, a collection of Ivy-enhanced versions of common Emacs commands.
3. *Swiper*, an Ivy-enhanced alternative to isearch.
#+END_QUOTE

- http://pragmaticemacs.com/emacs/dont-search-swipe/
- http://irreal.org/blog/?p=5340 -> swiper depends on ivy; ivy is much better than ido-mode/smex; example config

#+BEGIN_SRC emacs-lisp
(use-package ivy :demand
      :config
      (setq ivy-use-virtual-buffers t
            ivy-count-format "%d/%d "))

(use-package swiper
  :ensure t
  :config
  (setq ivy-display-style 'fancy) ;; fancy highlighting
  )

#+END_SRC
** neotree → F9

[[https://github.com/jaypei/emacs-neotree][NeoTree]] offers a file tree side-panel like NerdTree for Vim.

installed on 2015-03-22

#+BEGIN_SRC emacs-lisp
(use-package neotree
  :ensure t
  :defer 20
  :config ;; executed after loading package
  (global-set-key [f9] 'neotree-toggle)
)
#+END_SRC
** DISABLED csv-mode

Manipulating CSV files.

#+BEGIN_SRC emacs-lisp
(use-package csv-mode
  :ensure t
  :defer 10
  :config
  (add-to-list 'auto-mode-alist '("\\.[Cc][Ss][Vv]\\'" . csv-mode))
  (autoload 'csv-mode "csv-mode"
    "Major mode for editing comma-separated value files." t)
)
#+END_SRC
** magit
Magit for git revision control
#+BEGIN_SRC emacs-lisp
(use-package magit
  :ensure t
  :commands magit-get-top-dir
)
#+END_SRC
** rainbow-delimiters
[[https://github.com/Fanael/rainbow-delimiters][rainbow-delimiters]]; colour macthing parenthesis
#+BEGIN_SRC emacs-lisp
(use-package rainbow-delimiters
  :ensure t
  :commands rainbow-delimiters-mode
  :init
  (add-hook 'prog-mode-hook #'rainbow-delimiters-mode))
#+END_SRC
** git-gutter-fringe
#+BEGIN_SRC emacs-lisp
(use-package git-gutter-fringe
  :ensure t
  :diminish git-gutter-mode
  :config (global-git-gutter-mode))
#+END_SRC
** helm
#+BEGIN_SRC emacs-lisp
(use-package helm
 :ensure t
 :bind (("M-x" . helm-M-x)
        ("C-x C-f" . helm-find-files)
        ("C-x f" . helm-recentf)
        ("C-SPC" . helm-dabbrev))
 :config (progn
	    (helm-mode 1)))
#+END_SRC
*** Helm-projectile
Project management.
#+BEGIN_SRC emacs-lisp
(use-package projectile
  :ensure t
  :commands (projectile-find-file projectile-switch-project)
  :diminish projectile-mode
  :init
  (use-package helm-projectile
    :ensure t
    :bind (("M-p" . helm-projectile-find-file)
           ("M-P" . helm-projectile-switch-project)))
  :config
(projectile-global-mode))
#+END_SRC
** DISABLED guide-key
 Shows a popup with all the possible key bindings that would complete the
 started binding.
#+BEGIN_SRC emacs-lisp
(use-package guide-key
  :ensure t
  :defer 4
  :diminish guide-key-mode
  :config
    (progn
        (setq guide-key/guide-key-sequence t)
        (setq guide-key/idle-delay 0.4)
    (guide-key-mode 1)))
#+END_SRC
** company-mode
Modular in-buffer completion framework for Emacs
[[http://company-mode.github.io/][Reference]]

prevent company from completing on its own when we type Space or dot
#+BEGIN_SRC emacs-lisp
(defun company--my-insert-spc() (interactive) (company-abort)(insert-char #10r32))
(defun company--my-insert-dot() (interactive) (company-abort)(insert-char #10r46))
#+END_SRC 

#+BEGIN_SRC emacs-lisp
(use-package company
  :diminish company-mode
  :ensure t
  :init (global-company-mode)
  :config
  (setq
   company-echo-delay 0
   company-idle-delay 0.2
   company-minimum-prefix-length 3
   company-tooltip-align-annotations t
   company-tooltip-limit 20)
  ;; Default colors are awful - borrowed these from gocode (thanks!):
  ;; https://github.com/nsf/gocode/tree/master/emacs-company#color-customization
  (set-face-attribute
   'company-preview nil :foreground "black" :underline t)
  (set-face-attribute
   'company-preview-common nil :inherit 'company-preview)
  (set-face-attribute
   'company-tooltip nil :background "lightgray" :foreground "black")
  (set-face-attribute
   'company-tooltip-selection nil :background "steelblue" :foreground "white")
  (set-face-attribute
   'company-tooltip-common nil :foreground "darkgreen" :weight 'bold)
  (set-face-attribute
   'company-tooltip-common-selection nil :foreground "black" :weight 'bold)
  :bind
  (:map company-active-map
   ("ESC" . company-abort)
   ;; prevent company from completing on its own when we type regular characters
   ("SPC" . company--my-insert-spc)
   ("."   . company--my-insert-dot)
   )
  )
#+END_SRC
** dashboard
#+BEGIN_SRC emacs-lisp
(use-package dashboard
  :ensure t
  :config
  (dashboard-setup-startup-hook)
    ;; Set the title
    (setq dashboard-banner-logo-title "Welcome to Emacs Dashboard")
    ;; Set the banner
    (setq dashboard-startup-banner 3))
#+END_SRC
** htmlize
#+BEGIN_SRC emacs-lisp
(use-package htmlize
  :ensure t
  :commands (htmlize-buffer
             htmlize-file
             htmlize-many-files
             htmlize-many-files-dired
             htmlize-region))
#+END_SRC
** DISABLED mu4e & mail settings
- Dependencies
	- libtool
	- automake
	- autoconf

- Reference
	- [[https://www.djcbsoftware.nl/code/mu/mu4e/Installation.html][mu4e]]
	- [[https://ryanmcconville.com/blog/post/offlineimap-with-outlook365/][offlineimap-office365]]
	- [[http://prodissues.com/2016/02/adding-mu4e-support-to-emacs.html][mu4e, tutorial]]

#+BEGIN_SRC emacs-lisp
(add-to-list 'load-path "/usr/local/share/emacs/site-lisp/mu4e")
(setq mu4e-mu-binary (executable-find "/usr/local/bin/mu"))
(require 'mu4e)

;; default
(setq mu4e-maildir "~/Mail/sm")
;;(setq mu4e-drafts-folder "/[Gmail].Drafts")
;;(setq mu4e-sent-folder   "/[Gmail].Sent Mail")
;;(setq mu4e-trash-folder  "/[Gmail].Trash")
;;(setq mu4e-refile-folder  "/[Gmail].All Mail")

;; (See the documentation for `mu4e-sent-messages-behavior' if you have
;; additional non-Gmail addresses and want assign them different
;; behavior.)

;; setup some handy shortcuts
;; you can quickly switch to your Inbox -- press ``ji''
;; then, when you want archive some messages, move them to
;; the 'All Mail' folder by pressing ``ma''.

(setq mu4e-maildir-shortcuts
    '( ("/INBOX"               . ?i)
       ("/[Gmail].Sent Mail"   . ?s)
       ("/[Gmail].Trash"       . ?t)
       ("/[Gmail].All Mail"    . ?a)))

;; allow for updating mail using 'U' in the main view:
(setq mu4e-get-mail-command "offlineimap")
#+END_SRC
*** offlineimaprc
#+BEGIN_SRC
# Sample minimal config file.  Copy this to ~/.offlineimaprc and edit to
# get started fast.

[general]
accounts = Test
pythonfile = ~/.offlineimap.py

[Account Test]
localrepository = Local
remoterepository = Remote
maxage=2

[Repository Local]
type = Maildir
localfolders = ~/Mail/sm

[Repository Remote]
type = IMAP
remoteuser = sarath.m@tataelxsi.co.in
remotepasseval = mailpasswd('pwd')
remotehost = outlook.office365.com
remoteport = 993
realdelete = no
folderfilter = lambda folder: folder in ['INBOX', 'Sent', 'Sent Items']
## Try one of the following for Ubuntu or Arch:
sslcacertfile = /etc/ssl/certs/ca-certificates.crt
# sslcacertfile = OS-DEFAULT
#+END_SRC
*** TLS config
#+BEGIN_SRC emacs-lisp
(require 'starttls)
(setq starttls-use-gnutls t)
#+END_SRC
*** Outgoing mail settings
#+BEGIN_SRC emacs-lisp
(require 'smtpmail)
(setq send-mail-function  'smtpmail-send-it
      message-send-mail-function    'smtpmail-send-it
      smtpmail-auth-credentials     (expand-file-name "~/.authinfo")
      smtpmail-smtp-server  "smtp.office365.com"
      smtpmail-stream-type  'starttls
      smtpmail-smtp-service 587)
#+END_SRC
*** Default mail settings
general emacs mail settings; used when composing e-mail.
The non-mu4e-* stuff is inherited from emacs/message-mode
#+BEGIN_SRC emacs-lisp
(setq mu4e-reply-to-address "sarath.m@tataelxsi.co.in"
      user-mail-address "sarath.m@tataelxsi.co.in"
      user-full-name  "Sarath.M")
(setq mail-signature
    "Thanks & Regards
Sarath M
Senior Engineer - JLR TML
TATA ELXSI
Techno Park Campus, Kariyavattom,  Trivandrum  Kerala 695 581
Cell +91 9496354518")
#+END_SRC
*** Kill message buffers on exit
#+BEGIN_SRC emacs-lisp
(setq message-kill-buffer-on-exit t)
#+END_SRC
*** Encrypt OfflineIMAP and msmtp password with GnuPG
- [[http://f-koehler.github.io/posts/2015-03-17-offlineimap-msmtp-gnupg.html][Reference]]
1. Put this code in home folder
#+BEGIN_SRC python
  import subprocess                                                             
                                                                                
  def mailpasswd():                                                             
      path = "/home/sm/.mail_pwd.gpg"                                           
      return subprocess.check_output(["gpg2", "--quiet", "--batch", "-d",       
  path]).strip()                                                                

  if __name__ == '__main__':                                                    
      mailpasswd() 
#+END_SRC
*** Addressbook
- To use shorthand; Create a file ~/.mailrc and use it to create alias names
    #+BEGIN_SRC
    alias sm sarath.m@tataelxsi.co.in
    alias at anshul.tripathi@tataelxsi.co.in
    alias apd anjana.p@tataelxsi.co.in
    alias re robin@tataelxsi.co.in
    #+END_SRC
- Aliases will be autocompleted on typing comma
- To seperate several mail id's use comma.
*** Password Management
1. Setup up GPG user id. [[https://kb.iu.edu/d/awio][Reference]]
2. Setup *pass* password manager. [[https://www.passwordstore.org][Reference]]
3. Create a new password & insert in *pass* using
   #+BEGIN_SRC sh
   pass insert <desctiptive-name>
   #+END_SRC
   When prompted for password enter text in format
   given below
   #+BEGIN_SRC
   machine imap.gmail.com login john_doe@gmail.com password "your_password_here"
   #+END_SRC
4. Now create a soft-link from this file  (<desctiptive-name>.gpg); to ~/.authinfo.gpg
   #+BEGIN_SRC bash
   ln -s ~/.password-store/mail.gpg ~/.authinfo.gpg
   #+END_SRC
5. Done
- To update password use GNU *pass*
** beacon mode
This package highlights the cursor every time it jumps abruptedly from a
place to another (e.g. when changing windows and so on).
#+BEGIN_SRC emacs-lisp
(use-package beacon
  :ensure t
  :defer 2
  :diminish beacon-mode
  :config
(beacon-mode 1))
#+END_SRC
** evil-terminal-cursor-changer
Change terminal color and shape while using emacs in terminal
#+BEGIN_SRC emacs-lisp
  (use-package evil-terminal-cursor-changer
      :ensure t
      :defer 2
      :config
      (evil-terminal-cursor-changer-activate)
       (setq evil-motion-state-cursor 'box)  ; █
       (setq evil-visual-state-cursor 'hbar) ; _
       (setq evil-normal-state-cursor 'box)  ; █
       (setq evil-insert-state-cursor 'bar)  ; ⎸
       (setq evil-emacs-state-cursor  'bar)  ; ⎸
  )
#+END_SRC
** elpy
#+BEGIN_SRC emacs-lisp
(use-package python
  :ensure t
  :defer t
  :mode ("\\.py\\'" . python-mode))

(use-package elpy
  :ensure t
  :after python
  :config 
    (elpy-enable)
    (setq python-shell-interpreter "ipython2"
    python-shell-interpreter-args "-i --simple-prompt")
)
#+END_SRC
** yafolding
#+BEGIN_SRC emacs-lisp
(use-package yafolding
  :config
  (progn
    (setq yafolding-ellipsis-content " ... ")
    ))
#+END_SRC
** general
*** For easy defenition of key-bindings
#+BEGIN_SRC emacs-lisp
(use-package general
:ensure t
:config (general-evil-setup t))
#+END_SRC
* Babel
** Dont ask for confirmation
#+BEGIN_SRC emacs-lisp
(setq org-confirm-babel-evaluate nil)
#+END_SRC
** Enable Graphviz
#+BEGIN_SRC emacs-lisp
(org-babel-do-load-languages
 'org-babel-load-languages
 '((dot . t))) ; this line activates dot
#+END_SRC
* Key bindings
** Save buffer with ctrl-s
#+BEGIN_SRC emacs-lisp
(global-set-key (kbd "C-s") 'save-buffer)
#+END_SRC
** org-capture
#+BEGIN_SRC emacs-lisp
(global-set-key [f4] 'org-capture)
#+END_SRC
** init file
#+BEGIN_SRC emacs-lisp
(defun open-my-init-file()
  (interactive)
  (find-file "~/.emacs.d/init.el"))
(defun open-my-init-org-file()
  (interactive)
  (find-file "~/.emacs.d/config.org"))

(global-set-key (kbd "<f2>") 'open-my-init-file)
(global-set-key (kbd "<f3>") 'open-my-init-org-file)
#+END_SRC
** Key bindings using General.el
#+BEGIN_SRC emacs-lisp
(nvmap :prefix "SPC"
       "tt" 'yafolding-toggle-all
       "te" 'yafolding-toggle-element)

;; all keywords arguments are still supported
(nvmap :prefix ","
       ","  'other-window
       "."  'mode-line-other-buffer
       ";"  'elpy-goto-definition
       "'"  'pop-tag-mark
       "b"  'helm-mini             ;; Switch to another buffer
       "c"  'comment-dwim
       "d"  'helm-imenu            ;; Jump to function in buffer
       "g"  'magit-status
       "p"  'helm-show-kill-ring
       "/"  'swiper            ;; Ag search from project's root
       ;; "y" 'yank-to-x-clipboard
       "o"  'delete-other-windows  ;; C-w o
       "m"  'my-org-publish-buffer
)
#+END_SRC
* Styling
** Show current column:
#+BEGIN_SRC emacs-lisp
(setq column-number-mode t)
#+END_SRC
** Disable scroll-bar
#+BEGIN_SRC emacs-lisp
(toggle-scroll-bar -1)
#+END_SRC
** Emacs Theme
*** My favorite dark themes: 
**** noctilux, oceanic-next, cyberpunk, material, wombat
#+BEGIN_SRC emacs-lisp
(use-package noctilux-theme
  :ensure t
)
#+END_SRC
** Cursor settings:
#+BEGIN_SRC emacs-lisp
;; Prevent the cursor from blinking
(blink-cursor-mode 0)
(set-cursor-color "IndianRed")
#+END_SRC
** Font
 #+BEGIN_SRC emacs-lisp
(set-face-attribute 'default nil
		    :family "Source Code Pro"
		    :height 140
		    :weight 'normal
:width 'normal) 
 #+END_SRC
